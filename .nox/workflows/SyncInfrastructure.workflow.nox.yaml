# NOX Version Control Sync Command

name: Synchronise NOX project definition with Terraform Infrastructure

cli:
  branch: sync
  command: infrastructure
  command-alias: iac
  description: "|iac - Sets up or synchronizes the infrastructure repos on Azure Devops for your NOX project."
  examples:
    - ["sync infrastructure", "--path <designFolder>"]
    - ["sync iac", "--path <designFolder>"]

jobs:
  sync-infrastructure:  
    steps:

      - name: Locate the DevOps server
        id: locate-server
        uses: network/ping@v1
        with:
          host: ${{ project.versionControl.server }}
        display:
          success: Found the DevOps server in ${{ steps.locate-server.outputs.roundtrip-time }} milliseconds
          error: The DevOps server is not accesable. Are you connected to the Internet?
        run-at-server: true

      - name: Connect to the DevOps server
        id: connect-server
        uses: azdevops/connect@v1
        with:
          server: ${{ project.versionControl.server }}
          personal-access-token: ${{ server.secrets.AZURE_DEVOPS_PAT }}
        display:
          success: Connected to the DevOps server
          error: There was a problem connecting to the DevOps server. (${{ steps.connect-server.error-message }})
        run-at-server: true

      - name: Get the Nox Team project
        id: get-nox-project
        uses: azdevops/get-project@v1
        with:
          connection: ${{ steps.connect-server.outputs.connection }}
          project-name: ${{ project.versionControl.project }}
        display:
          success: Got the ${{ project.versionControl.project }} DevOps project
          error: There was a problem getting the ${{ project.versionControl.project }} project. (${{ steps.get-nox-project.error-message }})
        run-at-server: true

      - name: Ensure the Heimdall Infrastructure Repository exists
        id: ensure-heimdall-infra-repo
        uses: azdevops/ensure-repo-exists@v1
        with:
          connection: ${{ steps.connect-server.outputs.connection }}
          project-id: ${{ steps.get-nox-project.outputs.project-id }}
          repository-name: ${{ project.versionControl.project }}-infrastructure-tf
        display:
          success: Ensured that the project infrastructure repository exists
          error: There was a problem ensuring that the project infrastructure repository exists. ${{ steps.ensure-heimdall-infra-repo.error-message }}
        run-at-server: true

      - name: Find the project infra repo main branch
        id: find-heimdall-infra-main
        uses: azdevops/find-branch@v1
        with:
          connection: ${{ steps.connect-server.outputs.connection }}
          repository-id: ${{ steps.ensure-heimdall-infra-repo.outputs.repository-id }}
          branch-name: main
        display:
          success: Sucessfully got the heimdall-infra main branch
          error: There was a problem getting the heimdall-infra main branch ${{ steps.find-heimdall-infra-main.error-message }}
        run-at-server: true

#if the project infra repo does not exist the create it
      - name: Get the Heimdall project
        id: get-heimdall-project
        if: '"${{ steps.find-heimdall-infra-main.outputs.is-found }}" == "False"'
        uses: azdevops/get-project@v1
        with:
          connection: ${{ steps.connect-server.outputs.connection }}
          project-name: Heimdall.Microservices
        display:
          success: Got the Heimdall.Microservices project
          error: There was a problem getting the Heimdall.Microservices project (${{ steps.get-heimdall-project.error-message }})
        run-at-server: true

      - name: Get the Heimdall infra repo
        id: get-heimdall-infra-repo
        if: '"${{ steps.find-heimdall-infra-main.outputs.is-found }}" == "False"'
        uses: azdevops/get-repo@v1
        with:
          connection: ${{ steps.connect-server.outputs.connection }}
          project-id: ${{ steps.get-heimdall-project.outputs.project-id }}
          repository-name: Product-infrastructure-tf
        display:
          success: Successfully got the Heimdall infrastructure repo
          error: There was a problem getting the Heimdall infrastructure repository (${{ steps.get-heimdall-infra-repo.error-message }})
        run-at-server: true

      - name: Download the heimdall repo
        id: download-heimdall-infra-repo
        if: '"${{ steps.find-heimdall-infra-main.outputs.is-found }}" == "False"'
        uses: azdevops/download-repo-branch@v1
        with:
          connection: ${{ steps.connect-server.outputs.connection }}
          repository-id: ${{ steps.get-heimdall-repo.outputs.repository-id }}
          branch-name: main
        display:
          success: Successfully downloaded branch 'main' of the Heimdall repo to ${{ steps.download-heimdall-infra-repo.outputs.local-repository-path }}
          error: There was a problem downloading the Heimdall repository (${{ steps.download-heimdall-infra-repo.error-message }})
        run-at-server: true

      - name: Push the heimdall infra repo to project main branch
        id: push-heimdall-infra-repo-to-main
        if: '"${{ steps.find-heimdall-infra-main.outputs.is-found }}" == "False"'
        uses: azdevops/push-folder@v1
        with:
          connection: ${{ steps.connect-server.outputs.connection }}
          repository-id: ${{ steps.ensure-heimdall-infra-repo.outputs.repository-id }}
          source-path: ${{ steps.download-heimdall-infra-repo.outputs.local-repository-path }}
        display:
          success: Push the Heimdall infrastructure repo to project ${{ project.name }} success
          error: Push the Heimdall infrastructure repo to project ${{ project.name }} failed. (${{ steps.push-heimdall-infra-repo-to-main.error-message }})
        run-at-server: true

      - name: Create a new Infrastructure branch
        id: create-new-infra-branch
        uses: azdevops/create-branch@v1
        with:
          connection: ${{ steps.connect-server.outputs.connection }}
          repository-id: ${{ steps.ensure-heimdall-infra-repo.outputs.repository-id }}
        display:
          success: Successfully created new Infrastructure branch -> ${{ steps.create-new-infra-branch.outputs.branch-name }}
          error: Failed to create new Infrastructure branch -> ${{ steps.create-new-infra-branch.outputs.branch-name }}
        run-at-server: true

      - name: Download the new Infrastructure branch
        id: download-infra-branch
        uses: azdevops/download-repo-branch@v1
        with:
          connection: ${{ steps.connect-server.outputs.connection }}
          repository-id: ${{ steps.ensure-heimdall-infra-repo.outputs.repository-id }}
          branch-name: ${{ steps.create-new-infra-branch.outputs.branch-name }}
        display:
          success: Successfully downloaded branch '${{ steps.create-new-infra-branch.outputs.branch-name }}' of the repo to ${{ steps.download-infra-branch.outputs.local-repository-path }}
          error: There was a problem downloading the project helm-chart branch (${{ steps.download-infra-branch.error-message }})
        run-at-server: true

# Replace variables.tf
      - name: variables.tf Replace
        id: replace-variables-tf
        uses: file/replace-strings@v1
        with:
          path: ${{ steps.download-infra-branch.outputs.local-repository-path }}/variables.tf
          replacements:
            "default     = \"prd\"": "default     = \"Nox\""
            "default     = \"product\"": "default     = \"${{ project.versionControl.project }}\""
        display:
          success: Strings Replace in variables.tf success
          error: Strings Replace in variables.tf failed. (${{ steps.replace-variables-tf.error-message }})
        run-at-server: true

      - name: Push updated infra branch to project repo
        id: merge-infra-branch
        uses: azdevops/merge-folder@v1
        with:
          connection: ${{ steps.connect-server.outputs.connection }}
          repository-id: ${{ steps.ensure-heimdall-infra-repo.outputs.repository-id }}
          branch-name: ${{ steps.create-new-infra-branch.outputs.branch-name }}
          source-path: ${{ steps.download-infra-branch.outputs.local-repository-path }}
        display:
          success: Push updated infrastructure branch to project ${{ project.name }} success
          error: Push updated infrastructure branch to project ${{ project.name }} failed. (${{ steps.merge-infra-branch.error-message }})
        run-at-server: true

# tfe section
      - name: Get the Terraform project
        id: get-terraform-project
        uses: azdevops/get-project@v1
        with:
          connection: ${{ steps.connect-server.outputs.connection }}
          project-name: Terraform
        display:
          success: Got the Terraform project
          error: There was a problem getting the Terraform project (${{ steps.get-heimdall-project.error-message }})
        run-at-server: true

      - name: Get the Terraform tfe-manage-workspaces repo
        id: get-terraform-tfe-manage-workspaces-repo
        uses: azdevops/get-repo@v1
        with:
          connection: ${{ steps.connect-server.outputs.connection }}
          project-id: ${{ steps.get-terraform-project.outputs.project-id }}
          repository-name: tfe-manage-workspaces
        display:
          success: Successfully got the Terraform tfe-manage-workspaces repo
          error: There was a problem getting the Terraform tfe-manage-workspacesrepository (${{ steps.get-terraform-tfe-manage-workspaces-repo.error-message }})
        run-at-server: true

      - name: Create a new tfe-manage-workspaces branch
        id: create-new-tfe-manage-workspaces-branch
        uses: azdevops/create-branch@v1
        with:
          connection: ${{ steps.connect-server.outputs.connection }}
          repository-id: ${{ steps.get-terraform-tfe-manage-workspaces-repo.outputs.repository-id }}
        display:
          success: Successfully created new tfe-manage-workspaces branch -> ${{ steps.create-new-tfe-manage-workspaces-branch.outputs.branch-name }}
          error: Failed to create new tfe-manage-workspaces branch -> ${{ steps.create-new-tfe-manage-workspaces-branch.outputs.branch-name }}
        run-at-server: true

      - name: Download the new tfe-manage-workspaces branch
        id: download-tfe-manage-workspaces-branch
        uses: azdevops/download-repo-branch@v1
        with:
          connection: ${{ steps.connect-server.outputs.connection }}
          repository-id: ${{ steps.get-terraform-tfe-manage-workspaces-repo.outputs.repository-id }}
          branch-name: ${{ steps.create-new-tfe-manage-workspaces-branch.outputs.branch-name }}
        display:
          success: Successfully downloaded branch '${{ steps.create-new-tfe-manage-workspaces-branch.outputs.branch-name }}' of the repo to ${{ steps.download-tfe-manage-workspaces-branch.outputs.local-repository-path }}
          error: There was a problem downloading the tfe-manage-workspaces branch (${{ steps.download-tfe-manage-workspaces-branch.error-message }})
        run-at-server: true

      - name: Get Project snake case name
        id: get-project-snake-case-name
        uses: core/to-snake-case@v1
        with:
          source-string: ${{ project.versionControl.name }}
        display:
          success: Got project snake case name
          error: Unable to convert project name to snake case ${{ steps.get-project-snake-case-name.error-message }}
        run-at-server: true

      - name: Store repo branch folder, project name, project snake case name in variables
        id: add-tfe-vars
        uses: core/add-variables@v1
        with:
          branch-folder: ${{ steps.download-tfe-manage-workspaces-branch.outputs.local-repository-path }}
          project-name: ${{ steps.get-project-snake-case-name.outputs.result }}
          project-friendly-name: ${{ project.versionControl.name }}
        display:
          success: Variables stored
          error: Unable to store tfe variables ${{ steps.add-tfe-vars.error-message }}
        run-at-server: true

      - name: ensure microservice tf sub folder exists
        id: ensure-terraform-sub-folder
        uses: file/ensure-folder@v1
        with:
          path: ${{ vars.branch-folder }}
          folder-name: ${{ vars.project-name }}
        display:
          success: Ensured that microservice tf sub folder exists
          error: Could not ensure that microservice tf sub folder exists ${{ steps.ensure-terraform-sub-folder.error-message }}
        run-at-server: true

      - name: Delete microservice_name.tf terraform file if it exists
        id: delete-ms-tf-file
        uses: file/delete-file@v1
        with:
          path: ${{ vars.branch-folder }}/${{ vars.project-name }}/${{ vars.project-name }}.tf
        display:
          success: Ensured that microservice_name.tf terraform file does not exist
          error: unable to delete microservice_name.tf terraform file ${{ steps.delete-ms-tf-file.error-message }}
        run-at-server: true
        
      - name: Load microservice_name.tf terraform file template
        id: load-ms-tf-template
        uses: file/read-text@v1
        with: 
          path: ./Templates/terraform/heildall-ms-microservice.tf
        display:
          success: Loaded microservice_name.tf terraform file template
        run-at-server: true
      
      - name: replace microservice_name.tf template variables
        id: interpolate-ms-tf-file-template
        uses: core/replace-strings@v1
        with:
          source-string: ${{ steps.load-ms-tf-template.outputs.result-string }}
          replacements:
        display:
          success: Interpolated microservice_name.tf template variables
          error: Unable to interpolated microservice_name.tf template variables ${{ steps.interpolate-ms-tf-file-template.error-message }}
        run-at-server: true


      - name: Save microservice_name.tf terraform file
        id: save-ms-tf-file
        uses: file/write-text@v1
        with:
          path: ${{ vars.branch-folder }}/${{ vars.project-name }}/${{ vars.project-name }}.tf
          text-to-write: 
        display:
          success: Saved ${{ vars.project-name }}.tf
          error: Unable to save ${{ vars.project-name }}.tf ${{ steps.save-ms-tf-file.error-message }}
        run-at-server: true
        
#      - name: Add microservice_name_env.vars.tf

#      - name: Add workspaces to tfe_variable_set.tf

      # - name: Push updated branch to tfe-manage-workspaces-repo
      #   id: merge-tfe-repo
      #   uses: azdevops/merge-folder@v1
      #   with:
      #     connection: ${{ steps.connect-server.outputs.connection }}
      #     repository-id: ${{ steps.get-terraform-tfe-manage-workspaces-repo.outputs.repository-id }}
      #     branch-name: ${{ steps.create-new-tfe-manage-workspaces-branch.outputs.branch-name }}
      #     source-path: ${{ steps.download-tfe-manage-workspaces-branch.outputs.local-repository-path }}
      #   display:
      #     success: Push updated tfe config to Terraform Project success
      #     error: Push updated tfe branch to Terraform project failed. (${{ steps.merge-tfe-repo.error-message }})
      #   run-at-server: true