# NOX Database Sync Command

name: Synchronise NOX Definition with Postgres database

cli:
  branch: sync
  command: database
  command-alias: db
  description: Synchronises NOX definition with your hosted database.
  examples:
    - ["sync database", "--path <designFolder>"]
    - ["sync db", "--path <designFolder>"]

jobs:
  sync-database:
    steps:

      - name: Locate the database server
        id: locate-server
        uses: network/ping@v1
        with:
          host: ${{ secrets.NOX_PG_SERVER }}
        display:
          success: Found the database server in ${{ steps.locate-server.outputs.roundtrip-time }} milliseconds
          error: The database server is not accessible. Are you connected to the VPN? ${{ steps.locate-server.inputs.host }}

      - name: Connect to the database server
        id: connect-server
        uses: postgres/connect@v1
        with:
          server: ${{ secrets.NOX_PG_SERVER }}
          port: 5432
          user: ${{ secrets.NOX_PG_ADMIN_USER }}
          password: ${{ secrets.NOX_PG_ADMIN_PASSWORD }}
          database: postgres
        display:
          success: Connected to the database server
          error: There was a problem connecting to the database. (${{ steps.connect-server.error-message }})

      - name: Check the database version
        id: check-version
        uses: postgres/execute-scalar@v1
        with:
          connection: ${{ steps.connect-server.outputs.connection }}
          sql: SELECT version();
        display:
          success: ${{ steps.check-version.outputs.result }}
          error: There was a problem with the version check (${{ steps.check-version.error-message }})

      - name: Sanitized the database name to avoid Sql injection
        id: get-dbname
        uses: postgres/sanitize-sql-string@v1
        with:
          input-string: NOX_${{ config.Database.Name }}
        display:
          success: Database name is ${{ steps.get-dbname.outputs.result }}

      - name: Create variable for database name
        id: add-var-dbname
        uses: core/add-variables@v1
        with:
          db-name: ${{ steps.get-dbname.outputs.result }}
        display:
          success: Added variable 

      - name: Check that the database does not exist
        id: db-not-exist
        uses: postgres/execute-scalar@v1
        with:
          connection: ${{ steps.connect-server.outputs.connection }}
          sql: SELECT datname FROM pg_database WHERE datname=($1);
          parameters: ['${{ vars.db-name }}']
        validate: 
          that: '"${{ steps.db-not-exist.outputs.result }}" != "${{ vars.db-name }}"' 
          #that: ${{ steps.db-not-exist.outputs.result }} != ${{ vars.db-name }}
        display:
          success: Database not found
          error: Database already exists
        continue-on-error: true

      - name: Create database 
        id: create-db
        #if: ${{ steps.db-not-exist.was-valid }}
        if: '"${{ steps.db-not-exist.outputs.result }}" != "${{ vars.db-name }}"'
        uses: postgres/execute-nonquery@v1
        with:
          connection: ${{ steps.connect-server.outputs.connection }}
          sql: CREATE DATABASE "${{ vars.db-name }}";
        display:  
          success: Database created 
          error: Failed to create the database (${{ steps.create-db.error-message }})

      - name: Connect to project database
        id: connect-db
        uses: postgres/connect@v1
        with:
          server: ${{ secrets.NOX_PG_SERVER }}
          port: 5432
          user: ${{ secrets.NOX_PG_ADMIN_USER }}
          password: ${{ secrets.NOX_PG_ADMIN_PASSWORD }}
          database: ${{ vars.db-name }}
        display:
          success: Connected to the database server
          error: There was a problem connecting to the database. (${{ steps.connect-db.error-message }})

      - name: Add variables for role, admin and password
        id: add-other-vars
        uses: core/add-variables@v1
        with:
          db-role: ${{ vars.db-name }}_owneraccess
          db-admin: ${{vars.db-name }}_pg_admin
          db-password: ${{ vars.db-name }}_$123
          #db-password: ${{ env.SOME_VARIABLE }}_$123          
        display:
          success: Done!

      - name: Create admin user and role if needed and assign to admin user
        id: create-role
        uses: postgres/execute-nonquery@v1
        with:
          connection: ${{ steps.connect-db.outputs.connection }}
          sql: |
            DO
            $do$
            BEGIN
               IF EXISTS(
                  SELECT FROM pg_catalog.pg_roles
                  WHERE  rolname = LOWER('${{vars.db-role}}')) THEN
            
                  RAISE NOTICE 'Role "${{vars.db-role}}" already exists. Skipping.';
               ELSE
                  CREATE ROLE ${{vars.db-role}} WITH LOGIN;
               END IF;
            END
            $do$;
            GRANT ALL ON DATABASE "${{vars.db-name}}" TO ${{vars.db-role}};
            GRANT ALL ON SCHEMA public TO ${{vars.db-role}};
            GRANT ALL ON ALL TABLES IN SCHEMA public TO ${{vars.db-role}};
            GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO ${{vars.db-role}};
            GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO ${{vars.db-role}};
            DO
            $do$
            BEGIN
               IF EXISTS(
                  SELECT FROM pg_catalog.pg_user
                  WHERE  usename = LOWER('${{vars.db-admin}}')) THEN
            
                  RAISE NOTICE 'User "${{vars.db-admin}}" already exists. Skipping.';
               ELSE
                  CREATE USER ${{vars.db-admin}} WITH PASSWORD '${{vars.db-password}}';
               END IF;  
            END
            $do$;
            -- GRANT ${{vars.db-role}} TO ${{vars.db-admin}};
            ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO ${{vars.db-role}};
            ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO ${{vars.db-role}};
            ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON FUNCTIONS TO ${{vars.db-role}};     
        display:  
          success: Admin user and role created and assigned
          error: Failed to create user and role (${{ steps.create-role.error-message }})
