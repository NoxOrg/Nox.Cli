steps:
  - name: Get the current directory
    id: get-start-dir
    uses: file/get-current-directory@v1

  - name: Store current directory
    id: store-start-dir
    uses: core/add-variables@v1
    with:
      start-dir: ${{ steps.get-start-dir.outputs.path }}  
    
  - name: Ensure the .nox folder exists
    id: ensure-nox-folder
    uses: file/ensure-folder@v1
    with:
      path: ./
      folder-name: .nox
    display:
      success: Ensured that the .nox folder exists
      error: Unable to ensure that the .nox folder exists (${{ steps.ensure-nox-folder.error-message }})

  - name: Ensure that the .nox/design folder exists
    id: ensure-design-folder
    uses: file/ensure-folder@v1
    with:
      path: ./.nox
      folder-name: design
    display:
      success: Ensured that the .nox/design folder exists
      error: Unable to ensure that the .nox/design folder exists (${{ steps.ensure-design-folder.error-message }})

  - name: Search for a Nox yaml definition
    id: find-nox-yaml
    uses: file/find-file@v1
    with:
      path: ./.nox/design
      file-name: "*.service.nox.yaml"

  - name: Get the project name
    if: '"${{ steps.find-nox-yaml.outputs.is-found }}" == "False"'
    id: create-nox-yaml
    uses: console/prompt-schema@v1
    with:
      schema: |
        {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "type": "object",
          "required": ["name"],
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the NOX solution",
              "default": "${{ steps.get-start-dir.outputs.directory-name }}"
            }
          }
        }  

  - name: Create a nox yaml definition
    id: add-nox-options
    if: '"${{ steps.find-nox-yaml.outputs.is-found }}" == "False"'
    uses: console/prompt-schema@v1
    with:
      schema-url: https://noxorg.dev/schemas/NoxConfiguration.json
      include-prompts: [ "description","database","versionControl","team" ]
      exclude-prompts:
        - team.developers[0].mobilePhoneNumber
        - database.provider
        - database.options
        - database.connectionString
        - database.connectionStringVariable
        - versionControl.provider
      defaults:
        name: ${{ steps.create-nox-yaml.outputs.name }}
        description: The ${{ steps.create-nox-yaml.outputs.name }} service
        database.name: ${{ steps.create-nox-yaml.outputs.name }}Db
        database.server: "localhost"
        database.provider: "postgres"
        database.port: 5432
        database.user: sa
        database.password: Developer*123
        versionControl.provider: azureDevOps
        versionControl.server: https://dev.azure.com/iwgplc
        versionControl.project: ${{ steps.create-nox-yaml.outputs.name }}
        versionControl.repository: ${{ steps.create-nox-yaml.outputs.name }}.Api.V1
        team.developers[0].name: ${{ cache.username }}
        team.developers[0].userName: ${{ cache.upn }}
        team.developers[0].isProductOwner: n
      output-file:
        folder: ./.nox/design
        filename: ${{ steps.create-nox-yaml.outputs.name }}.service.nox.yaml
    display:
      success: Created nox yaml definition ${{ steps.add-nox-options.outputs.file-path }}
      error: Unable to create a yaml definition for your solution (${{ steps.add-nox-options.error-message }})
      
  - name: Load the new Nox solution configuration
    id: load-nox-config
    if: '"${{ steps.find-nox-yaml.outputs.is-found }}" == "False"'
    uses: core/load-nox-configuration@v1
    with:
      path: ./.nox/design
    display:
      success: Loaded the newly created Nox solution configuration
      error: Unable to load the newly created Nox solution configuration (${{ steps.load-nox-config.error-message }})

  - name: Find the .git folder
    id: find-git-folder
    uses: file/find-folder@v1
    with:
      path: ./.git

  - name: Perform a git init
    id: git-init
    if: '"${{ steps.find-git-folder.outputs.is-found }}" == "False"'
    uses: powershell/script@v1
    with:
      script: git init -b main
    display:
      success: Performed a git init
      error: Unable to perform a git init (${{ steps.git-init.error-message }})

  - name: Find the .gitignore file
    id: find-gitignore
    uses: file/find-file@v1
    with:
      path: ./
      file-name: .gitignore

  - name: Create a gitignore file
    id: create-gitignore
    if: '"${{ steps.find-gitignore.outputs.is-found }}" == "False"'
    uses: powershell/script@v1
    with:
      script: dotnet new gitignore
    display:
      success: Created a gitignore file
      error: Unable to create a gitignore file (${{ steps.create-gitignore.error-message }})

  - name: Ensure the src folder exists
    id: ensure-src-folder
    uses: file/ensure-folder@v1
    with:
      path: ./
      folder-name: src
    display:
      success: Ensured that the src folder exists
      error: Unable to ensure that the src folder exists (${{ steps.ensure-src-folder.error-message }})
      
  - name: Ensure the tests folder exists
    id: ensure-tests-folder
    uses: file/ensure-folder@v1
    with:
      path: ./
      folder-name: tests
    display:
      success: Ensured that the tests folder exists
      error: Unable to ensure that the tests folder exists (${{ steps.ensure-tests-folder.error-message }})

  - name: Set src as current directory
    id: set-src-current
    uses: file/set-current-directory@v1
    with:
      path: ./src

  - name: Find the sln file
    id: find-sln
    uses: file/find-file@v1
    with:
      path: ./
      file-name: ${{ project.versionControl.project }}.sln

  - name: Create the sln file
    id: create-sln
    if: '"${{ steps.find-sln.outputs.is-found }}" == "False"'
    uses: powershell/script@v1
    with:
      script: dotnet new solution -n ${{ project.versionControl.project }}
    display:
      success: Created a new dotnet solution
      error: Unable to create a new dotnet solution (${{ steps.create-sln.error-message }})

  - name: Find the proj file
    id: find-proj
    uses: file/find-file@v1
    with:
      path: ./${{ project.versionControl.repository }}
      file-name: ${{ project.versionControl.repository }}.csproj

  - name: Create a dotnet webapi project
    id: create-proj
    if: '"${{ steps.find-proj.outputs.is-found }}" == "False"'
    uses: powershell/script@v1
    with:
      script: dotnet new webapi -n ${{ project.versionControl.repository }}
    display:
      success: Created a new dotnet webapi project
      error: Unable to create a new dotnet webapi project (${{ steps.create-proj.error-message }})

  - name: Add the webapi to the solution
    id: add-proj-to-sln
    uses: powershell/script@v1
    with:
      script: dotnet sln add ${{ project.versionControl.repository }}
    display:
      success: Added the webapi to the solution
      error: Unable to add the webapi to the solution (${{ steps.add-proj-to-sln.error-message }})
      
  - name: Search for a .dockerignore file
    id: find-dockerignore
    uses: file/find-file@v1
    with:
      path: ./
      file-name: .dockerignore
      
  - name: Load the dockerignore template
    id: load-dockerignore-template
    if: '"${{ steps.find-dockerignore.outputs.is-found }}" == "False"'
    uses: core/load-template@v1
    with:
      path: docker/dockerignore
    display:
      success: Loaded the dockerignore template
      error: Unable to load the dockerignore template (${{ steps.load-dockerignore-template.error-message }})
      
  - name: Create a .dockerignore for the project
    id: create-dockerignore
    if: '"${{ steps.find-dockerignore.outputs.is-found }}" == "False"'
    uses: file/write-text@v1
    with:
      path: ./.dockerignore
      text-to-write: ${{ steps.load-dockerignore-template.outputs.result }}
    display:
      success: Created a .docker ignore file
      error: Unable to create a .dockerignore file (${{ steps.create-dockerignore.error-message }})
      
  - name: Search for a Docker file
    id: find-docker-file
    uses: file/find-file@v1
    with:
      path: ./
      file-name: Dockerfile

  - name: Load the Dockerfile template
    id: load-dockerfile-template
    if: '"${{ steps.find-docker-file.outputs.is-found }}" == "False"'
    uses: core/load-template@v1
    with:
      path: docker/Dockerfile
    display:
      success: Loaded the Dockerfile template
      error: Unable to load the Dockerfile template (${{ steps.load-dockerfile-template.error-message }})
      
  - name: Interpolate Dockerfile template variables
    id: interpolate-docker-file
    if: '"${{ steps.find-docker-file.outputs.is-found }}" == "False"'
    uses: core/replace-strings@v1
    with:
      source-string: ${{ steps.load-dockerfile-template.outputs.result }}
      replacements:
        "<repo-name>": ${{ project.versionControl.repository }}
    display:
      success: Interpolated Dockerfile template variables
      error: Unable to interpolated Dockerfile template variables ${{ steps.interpolate-docker-file.error-message }}

  - name: Create a Dockerfile for the project
    id: create-docker-file
    if: '"${{ steps.find-docker-file.outputs.is-found }}" == "False"'
    uses: file/write-text@v1
    with:
      path: ./Dockerfile
      text-to-write: ${{ steps.interpolate-docker-file.outputs.result }}
    display:
      success: Created a .Dockerfile file
      error: Unable to create a Dockerfile (${{ steps.create-docker-file.error-message }})

  - name: Add the project files to git
    id: git-add-files
    if: '"${{ steps.find-proj.outputs.is-found }}" == "False"'
    uses: powershell/script@v1
    with:
      script: git add --all
    display:
      success: Added the project files to git
      error: Unable to add the project files to git (${{ steps.git-add-files.error-message }})

  - name: Perform an initial commit
    id: git-initial-commit
    if: '"${{ steps.find-proj.outputs.is-found }}" == "False"'
    uses: powershell/script@v1
    with:
      script: git commit -m "Initial Commit"
    display:
      success: Performed an initial commit
      error: Unable to perform an initial commit (${{ steps.git-initial-commit.error-message }})
